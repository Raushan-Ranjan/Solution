static LinkedHashMap<String,Integer> solution(LinkedHashMap<String,Integer> lhm){

        LinkedHashMap<String,Integer> missingDate = new LinkedHashMap<>();    // taking another map to store final result
       Set<String> set = lhm.keySet();       //taking key into Set
        Iterator<String> it = set.iterator();
        String cur = it.next();
        LocalDate currDate = LocalDate.parse(cur);
        missingDate.put(currDate.toString(),lhm.get(cur));
        while(it.hasNext()){                                      //traversing through key of given input
            String nextDateString = it.next();
            LocalDate nextDate = LocalDate.parse(nextDateString);    // cast String to localDate
            long gapDays = DAYS.between(currDate,nextDate);            // Finding number of gap between two dates
            if(gapDays==1){
                missingDate.put(nextDate.toString(),lhm.get(nextDateString));
            }else{
                int curValue =  lhm.get(cur);
                int nextValue =  lhm.get(nextDateString);
                long avgValue = Math.abs(curValue-nextValue);
                long incre = avgValue/gapDays;
                curValue = Math.min(curValue,nextValue);
                int added= curValue + (int ) incre;
                while(gapDays-->0){    

                    currDate = currDate.plusDays(1);
                    missingDate.put(currDate.toString(),added);
                    added+=incre;

                }
                missingDate.put(nextDate.toString(),nextValue);
            }
            cur=nextDateString;
            currDate=nextDate;

        }
          return missingDate;
        }
